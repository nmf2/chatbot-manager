# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chatbot_manager.models.base_model_ import Model
from chatbot_manager import util


class ChatbotFullInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, running: bool=None, created: datetime=None,
                 description: str=None, id: str=None, address: str=None):  # noqa: E501
        """ChatbotFullInfo - a model defined in Swagger

        :param running: The running of this ChatbotFullInfo.  # noqa: E501
        :type running: bool
        :param created: The created of this ChatbotFullInfo.  # noqa: E501
        :type created: datetime
        :param description: The description of this ChatbotFullInfo.  # noqa: E501
        :type description: str
        :param id: The id of this ChatbotFullInfo.  # noqa: E501
        :type id: str
        :param address: The address of this ChatbotFullInfo.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            'running': bool,
            'created': datetime,
            'description': str,
            'id': str,
            'address': str
        }

        self.attribute_map = {
            'running': 'running',
            'created': 'created',
            'description': 'description',
            'id': 'id',
            'address': 'address'
        }

        self._running = running
        self._created = created
        self._description = description
        self._id = id
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'ChatbotFullInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatbotFullInfo of this ChatbotFullInfo.  # noqa: E501
        :rtype: ChatbotFullInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def running(self) -> bool:
        """Gets the running of this ChatbotFullInfo.


        :return: The running of this ChatbotFullInfo.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running: bool):
        """Sets the running of this ChatbotFullInfo.


        :param running: The running of this ChatbotFullInfo.
        :type running: bool
        """

        self._running = running

    @property
    def created(self) -> datetime:
        """Gets the created of this ChatbotFullInfo.


        :return: The created of this ChatbotFullInfo.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this ChatbotFullInfo.


        :param created: The created of this ChatbotFullInfo.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def description(self) -> str:
        """Gets the description of this ChatbotFullInfo.


        :return: The description of this ChatbotFullInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ChatbotFullInfo.


        :param description: The description of this ChatbotFullInfo.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this ChatbotFullInfo.


        :return: The id of this ChatbotFullInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChatbotFullInfo.


        :param id: The id of this ChatbotFullInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def address(self) -> str:
        """Gets the address of this ChatbotFullInfo.


        :return: The address of this ChatbotFullInfo.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this ChatbotFullInfo.


        :param address: The address of this ChatbotFullInfo.
        :type address: str
        """

        self._address = address
